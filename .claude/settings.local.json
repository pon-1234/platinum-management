{
  "permissions": {
    "allow": [
      "Bash(npx create-next-app:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm dev:*)",
      "Bash(npx husky:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(npm test:*)",
      "Bash(npm install:*)",
      "Bash(pnpm test:*)",
      "Bash(ls:*)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm typecheck:*)",
      "Bash(find:*)",
      "Bash(pkill:*)",
      "Bash(mv:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm run lint:*)",
      "Bash(pnpm build:*)",
      "Bash(SKIP_ENV_VALIDATION=true pnpm build:skip-lint)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(npm run build:*)",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" psql -h aws-0-us-east-1.pooler.supabase.com -p 6543 -U postgres -d postgres -c \"\\dt\")",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(brew install:*)",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" /opt/homebrew/bin/psql -h aws-0-us-east-1.pooler.supabase.com -p 6543 -U postgres -d postgres -c \"\\dt\")",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" /opt/homebrew/bin/psql -h aws-0-us-east-1.pooler.supabase.com -p 5432 -U postgres -d postgres -c \"\\dt\")",
      "Bash(for file in supabase/migrations/202401{03..09}*.sql)",
      "Bash(do echo \"Running $file...\")",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" /opt/homebrew/bin/psql -h db.pdomeeyvatachcothudq.supabase.co -p 5432 -U postgres -d postgres -f \"$file\")",
      "Bash(done)",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" /opt/homebrew/bin/psql -h db.pdomeeyvatachcothudq.supabase.co -p 5432 -U postgres -d postgres -c \"\nINSERT INTO customers (id, name, name_kana, phone_number, line_id, birthday, memo, status) VALUES\n  (''a1234567-89ab-cdef-0123-456789abcdef'', ''Â±±Áî∞ Â§™ÈÉé'', ''„É§„Éû„ÉÄ „Çø„É≠„Ç¶'', ''090-1234-5678'', ''yamada_line'', ''1985-05-15'', ''VIP„ÅäÂÆ¢Êßò'', ''active''),\n  (''b2345678-9abc-def0-1234-56789abcdef0'', ''Áî∞‰∏≠ Ê¨°ÈÉé'', ''„Çø„Éä„Ç´ „Ç∏„É≠„Ç¶'', ''090-2345-6789'', ''tanaka_line'', ''1990-08-20'', ''Â∏∏ÈÄ£ÂÆ¢'', ''active''),\n  (''c3456789-abcd-ef01-2345-6789abcdef01'', ''‰ΩêËó§ ‰∏âÈÉé'', ''„Çµ„Éà„Ç¶ „Çµ„Éñ„É≠„Ç¶'', ''090-3456-7890'', ''sato_line'', ''1988-12-10'', '''', ''active'')\nON CONFLICT (id) DO NOTHING;\n\")",
      "Bash(npx vercel logs:*)",
      "WebFetch(domain:platinum-management.vercel.app)",
      "Bash(PGPASSWORD=\"iru5rwL02ZMBQtl0\" /opt/homebrew/bin/psql -h db.pdomeeyvatachcothudq.supabase.co -p 5432 -U postgres -d postgres -c \"\n-- Insert new admin user with proper Supabase auth format\nINSERT INTO auth.users (\n  instance_id,\n  id,\n  aud,\n  role,\n  email,\n  encrypted_password,\n  email_confirmed_at,\n  invited_at,\n  confirmation_token,\n  confirmation_sent_at,\n  recovery_token,\n  recovery_sent_at,\n  email_change_token_new,\n  email_change,\n  email_change_sent_at,\n  last_sign_in_at,\n  raw_app_meta_data,\n  raw_user_meta_data,\n  is_super_admin,\n  created_at,\n  updated_at,\n  phone,\n  phone_confirmed_at,\n  phone_change,\n  phone_change_token,\n  phone_change_sent_at,\n  email_change_token_current,\n  email_change_confirm_status,\n  banned_until,\n  reauthentication_token,\n  reauthentication_sent_at\n) VALUES (\n  ''00000000-0000-0000-0000-000000000000'',\n  ''a2b4d3c8-af32-4205-8ae6-207df5b5ac06'',\n  ''authenticated'',\n  ''authenticated'',\n  ''admin@platinum-demo.com'',\n  crypt(''admin123'', gen_salt(''bf'')),\n  NOW(),\n  NULL,\n  '''',\n  NULL,\n  '''',\n  NULL,\n  '''',\n  '''',\n  NULL,\n  NULL,\n  ''{\"\"provider\"\": \"\"email\"\", \"\"providers\"\": [\"\"email\"\"]}'',\n  ''{\"\"email_verified\"\": true}'',\n  NULL,\n  NOW(),\n  NOW(),\n  NULL,\n  NULL,\n  '''',\n  '''',\n  NULL,\n  '''',\n  0,\n  NULL,\n  '''',\n  NULL\n);\n\")",
      "Bash(grep:*)",
      "Bash(gemini:*)",
      "Bash(gemini-search:*)",
      "Bash(gemini-analyze:*)",
<<<<<<< Updated upstream
      "Bash(npx supabase db push:*)",
      "Bash(psql:*)"
=======
      "Bash(gh pr checks:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr:*)",
      "Bash(git fetch:*)",
      "Bash(git merge:*)",
      "Bash(git stash:*)"
>>>>>>> Stashed changes
    ],
    "deny": []
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit.*\\.(spec|test)\\.(ts|tsx)$",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üî¥ Red Phase: Running test to confirm failure...' && npm run test -- --run --reporter=verbose --testNamePattern='%(file_path)s' || echo '‚úÖ Test failed as expected (Red phase complete)'"
          }
        ]
      },
      {
        "matcher": "Write|Edit.*\\.(ts|tsx)$",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üü¢ Green Phase: Formatting and linting...' && npx prettier --write '%(file_path)s' && npm run lint -- --fix '%(file_path)s'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üõë Stop Hook: Running full CI pipeline...' && npm run lint && npm run typecheck && npm run test && npm run build"
          },
          {
            "type": "command",
            "command": "echo 'üìä Coverage Check: Verifying test coverage...' && npm run test:coverage"
          }
        ]
      }
    ]
  }
}